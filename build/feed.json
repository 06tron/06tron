{
  "version": "https://jsonfeed.org/version/1.1",
  "title": "○–○––○–○ blog",
  "home_page_url": "https://6t.lt/blog",
  "feed_url": "https://home.6t.lt/feed.json",
  "description": "Matthew R. Richardson’s blog, on topics such as web programming and recreational math.",
  "icon": "https://home.6t.lt/icons/48.svg",
  "authors": [
    {
      "name": "Matthew Richardson",
      "url": "https://orcid.org/0009-0001-0977-2029"
    }
  ],
  "language": "en-US",
  "items": [
    {
      "id": "urn:uuid:5C8A5076-C850-41ED-A02F-B06ABFC87D66",
      "url": "https://6t.lt/blog/#3",
      "title": "677 - URI Encoding",
      "content_html": "<p>With the book club this past semester I read Daphne du Maurier's <cite><a href=\"https://www.wikidata.org/wiki/Q1334940\">Rebecca</a></cite>, Gerald Durrell's <cite><a href=\"https://www.wikidata.org/wiki/Q1394009\">My Family and Other Animals</a></cite>, and most of <a href=\"https://www.wikidata.org/wiki/Q3993282\">Tony Mendez's</a> <cite>Argo</cite>. I also read Cormac McCarthy's <cite><a href=\"https://www.wikidata.org/wiki/Q264519\">All the Pretty Horses</a></cite> and Oliver Burkeman's <cite><a href=\"https://www.wikidata.org/wiki/Q112227229\">4000 Weeks</a></cite> on my own.</p><section class=\"software web\" id=\"percent_encode_677\"><h3><span class=\"fl\">Percent-Encoding Guide</span></h3><p>According to <a href=\"https://www.rfc-editor.org/info/std66\">STD 66 RFC 3986</a>, the characters of the string <q><code>!#$&amp;'()*+,/:;=?@[]</code></q> could have a special meaning in a URI and are reserved. The <a href=\"https://infra.spec.whatwg.org/#ascii-alphanumeric\">ASCII alphanumeric</a> characters and those contained in <q><code>-._~</code></q> are unreserved. Any character outside of these two sets must be percent-encoded before inclusion in a URI. This is what the JavaScript <cite>encodeURI()</cite> function does, in addition to encoding the square brackets <q><code>[]</code></q> which were not yet included in the set of URI characters when the superseded <a href=\"https://www.rfc-editor.org/info/rfc2396\">RFC 2396</a> was written.</p><p>The unreserved characters can always be left unencoded, so we just need to encode some subset of the reserved characters. This subset depends on the URI scheme being used and where in the URI the characters are. The <cite>encodeURIComponent()</cite> function encodes all of the reserved characters except for <q><code>!'()*</code></q> which probably don't need to be encoded as they weren't yet reserved in RFC 2396. We can encode a still smaller subset of the reserved characters in the following cases.</p><h4>Data URIs</h4><p><a href=\"https://www.rfc-editor.org/info/rfc2397\">RFC 2397</a> states that the main content section of a data URI will consist of some number of 'uric' characters, and that these characters are defined in RFC 2396. It turns out that any percent-encoded, reserved, or unreserved character is allowed, except for <q><code>#[]</code></q> as these three are not 'uric' characters. The code below shows how an SVG data URI might be constructed.</p><pre>const rectSVG = String.raw`&lt;svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\">&lt;rect fill=\"#69E\" x=\"20\" y=\"8\" width=\"15.2\" height=\"87\"/>&lt;/svg>`;\nconst rectDataURI = \"data:image/svg+xml;charset=UTF-8,\" + encodeURI(rectSVG).replaceAll(\"#\", \"%23\");</pre><p>The resulting string is <q><code>data:image/svg+xml;charset=UTF-8,%3Csvg%20xmlns=%22http://www.w3.org/2000/svg%22%20viewBox=%220%200%20100%20100%22%3E%3Crect%20fill=%22%2369E%22%20x=%2220%22%20y=%228%22%20width=%2215.2%22%20height=%2287%22/%3E%3C/svg%3E</code></q>.</p><p>Note that <cite>String.raw()</cite> is helpful if the data contains backslashes, but if it contains backticks or the substring <q><code>${</code></q> then you can no longer simply paste the data into a template literal.</p><pre>String.raw`_\\`_\\${_${\"`\"}_` === \"_\\\\`_\\\\${_`_\"</pre><p>Since the square brackets were more recently reserved, I thought they might be allowed in data URIs, but as of now a link like &lt;a href=\"data:,%23[]\">#[]&lt;/a> is flagged for an illegal character error by the W3C markup validator. I saw a few GitHub issues like <a href=\"https://github.com/whatwg/url/issues/753\">this one</a> in support of unescaped square brackets, so they may be allowed in the future.</p><h4>Query Strings</h4><p>The query part of a URI begins after a question mark. It is composed of the 'query' characters defined in RFC 3986, and these are exactly the same as the 'uric' characters. However, the characters <q><code>&amp;+=</code></q> have special purposes. The query string is a set of 'key=value' pairs, separated by ampersands, and in which plus signs represent spaces. The equals sign needs to be encoded in the 'key' portion, but not in the 'value' portion as only the first equals sign separates the two parts. Encode the data as you would for a data URI, then handle these three special characters, and as a final step we can change the encoding of spaces from <q><code>%20</code></q> to <q><code>+</code></q>. <a href=\"data:text/html;charset=UTF-8,%22%20!%23$&amp;'()*+,/:;=?@%5B%5D%22%3Cbr%3E%3Ca%20href=%22data:,%2522%2520!%2523$&amp;'()*+,/:;=?@%255B%255D%2522%22%3Ein%20data%20URI%3C/a%3E%3Cbr%3E%3Ca%20href=%22https://6t.lt/?b=%2522+!%2523$%2526%2527()*%252B,/:;=?@%255B%255D%2522%22%3Ein%20query%20string%3C/a%3E\">This data URI</a> contains two links which compare the encoding of the reserved characters and the space character in a data URI and in a query string.</p><pre>const inlineStyle = `background-image:url(\"${rectDataURI}\");color-scheme:light dark`;\nconst vertices = \"[[1,0],[0.58,0.58],[0,1],[-0.58,0.58],[-1,0],[-0.58,-0.58],[0,-1],[0.58,-0.58]]\";\n\nfunction encodeQueryValue(val) {\n\treturn encodeURI(val).replace(/[#&amp;'+]|%20/g, function (char) {\n\t\treturn { \"#\": \"%23\", \"&amp;\": \"%26\", \"'\": \"%27\", \"+\": \"%2B\", \"%20\": \"+\" }[char];\n\t});}\n\nconst mirrorPolygonURL = `https://home.6t.lt/66c/mirror_polygon.svg?h=6&amp;v=${encodeQueryValue(vertices)}&amp;i=${encodeQueryValue(inlineStyle)}`;</pre><p>The above code also encodes the single quote character, as <a href=\"https://github.com/whatwg/url/issues/348\">this</a> GitHub issue suggests doing so in some cases. The code generates the URL <q><code>https://home.6t.lt/66c/mirror_polygon.svg?h=6&amp;v=%5B%5B1,0%5D,%5B0.58,0.58%5D,%5B0,1%5D,%5B-0.58,0.58%5D,%5B-1,0%5D,%5B-0.58,-0.58%5D,%5B0,-1%5D,%5B0.58,-0.58%5D%5D&amp;i=background-image:url(%22data:image/svg%2Bxml;charset=UTF-8,%253Csvg%2520xmlns=%2522http://www.w3.org/2000/svg%2522%2520viewBox=%25220%25200%2520100%2520100%2522%253E%253Crect%2520fill=%2522%252369E%2522%2520x=%252220%2522%2520y=%25228%2522%2520width=%252215.2%2522%2520height=%252287%2522/%253E%253C/svg%253E%22);color-scheme:light+dark</code></q>.</p><p>If you want to encode the whole query string at once, then the reserved characters to be encoded are <q><code>#'+[]</code></q>, and any ampersands or equals signs could be manually encoded if necessary. Just remember that all extra encoding has to be done after using <cite>encodeURI()</cite> to avoid double encoding.</p></section><section class=\"changelog\"><h3>End of 2024 Changes</h3><ul><li>Made a basic <a href=\"https://home.6t.lt/shortcuts/\">HTML Viewer</a> webpage, as an alternative to an HTML data URI. I've set it up at the domain '6t.lt': <a class=\"naked\" href=\"https://6t.lt?b=Your+HTML+content+here\">link</a>.</li><li>Started posting bike ride plans for around Amherst on my <a href=\"https://bike.6t.lt/\">cycling repository GitHub page</a>.</li><li>Uploaded an <a href=\"https://home.6t.lt/66d/rmc_logo.svg\">SVG version</a> of the UMass Recreational Math Club logo.</li></ul></section>",
      "summary": "How to encode Uniform Resource Identifiers, with specifics on data URIs and query strings.",
      "date_published": "2024-12-29T22:35:12-05:00",
      "date_modified": "2025-07-10T11:11:18-04:00",
      "tags": [
        "changelog",
        "software",
        "web"
      ]
    },
    {
      "id": "urn:uuid:A499496A-A687-42D1-8E39-91850DD661AA",
      "url": "https://6t.lt/blog/#2",
      "title": "66f - Square Mesh Navigation",
      "content_html": "<p>This is the content currently featured on my website's home page. I may edit the \"About Me\" section in the future, but the Number Space description I wrote in early 2023 should stay the same.</p><section class=\"featured projects\"><h3><span class=\"fl\">Number Space</span></h3><figure><img height=\"162\" loading=\"lazy\" src=\"https://home.6t.lt/668/ns_portals.svg\" alt=\"small sudoku puzzle\"/></figure><p>A Sudoku variant that doesn't change anything but the shape of the puzzle. This <a href=\"https://6vt.nl/\">interactive website</a> is a work in progress. So far there are four puzzles that a visitor can play, as long as they have a keyboard and mouse.</p><p>These oddly shaped puzzles can be modeled with a graph structure. Suppose there is a vertex for each cell in the puzzle. For example a regular Sudoku puzzle would have 81 vertices. The player traverses this graph by moving their mouse between adjacent cells.</p><p>During puzzle navigation there are two components to the player's position: Where are they in the puzzle? And how is this location placed on the screen? Where they are is at the current vertex, which represents one of the puzzle's cells. This cell's placement on the screen is the player's \"level\". The level describes the cell's horizontal position, vertical position, and orientation. There are eight possible orientations in this game, which correspond to the symmetries of a square.</p><p>The player's position changes frequently, so these two components must change accordingly. Each edge in the graph is labeled by a matrix which describes the relationship between its two endpoints. The level is represented with a similar matrix. Every time the player moves to a new cell, they follow a single edge in the graph. The current vertex changes to this edge's endpoint, and the level is multiplied by the matrix which labels this edge. </p></section><div id=\"collage_619\" class=\"art\"><figure><img height=\"711\" loading=\"lazy\" src=\"https://home.6t.lt/619/A Crow's Head.png\" alt=\"two piece collage\"/><figcaption><p>I put this collage together in November 2021, using material related to books published by the University of Massachusetts Press.</p></figcaption></figure></div><section class=\"featured\"><h3><span class=\"fl\">About Me</span></h3><figure><img height=\"162\" loading=\"lazy\" src=\"https://home.6t.lt/613/mt_tom.jpg\" alt=\"portrait photo\"/></figure><p>I'm a computer science graduate from UMass Amherst, with a master's degree. My favorite subjects are computer graphics, abstract algebra, and artificial intelligence.</p><p>See my <a href=\"https://www.linkedin.com/in/3mrichardson/\">LinkedIn profile</a>.</p><p>View this page's <a href=\"https://github.com/06tron/06tron/\">source on GitHub</a>.</p></section>",
      "summary": "An introduction to the blog.",
      "date_published": "2024-09-27T15:01:38-04:00",
      "date_modified": "2025-07-10T09:47:23-04:00",
      "tags": [
        "art",
        "projects"
      ]
    },
    {
      "id": "urn:uuid:46CAC173-449A-455A-8E13-BDAA58EA546F",
      "url": "https://6t.lt/blog/#1",
      "title": "66c - Death and the Compass",
      "content_html": "<p>I first learned about Jorge Luis Borges and his short story <cite>Death and the Compass</cite> in 2022 while reading George Fayen's essay in the book <cite><a href=\"https://www.wikidata.org/wiki/Q126176127\">Patterns of Symmetry</a></cite>. In July 2024 I read the story and discussed it with a book club run by my school's library.</p><h3>The Page to Screen Book Club</h3><p>After finishing Terry Pratchett's <cite>Going Postal</cite>, an eight day story about a conman turned postmaster, we read <cite>Death and the Compass</cite> and watched the short film adaptation <cite><a href=\"https://www.youtube.com/embed/j_UfUxm9Xko?mute=1\">Spiderweb</a></cite> directed by Paul Miller.</p><p>The first sentence of the story, as translated by Donald A. Yates, is: <q>Of the many problems which exercised the reckless discernment of Lönnrot, none was so strange—so rigorously strange, shall we say—as the periodic series of bloody events which culminated at the villa of Triste-le-Roy, amid the ceaseless aroma of the eucalypti.</q></p><p>I read this in the book <cite><a href=\"https://archive.org/details/labyrinths0000unse_y9b3\">Labyrinths</a></cite>, and we noted that translator Anthony Kerrigan worded it as the exercise of <q>daring perspicacity</q> in the text other club members read. The line came up again as the first narration of <cite>Spiderweb</cite>: <q>Of the many unusual cases which challenged the powers of the celebrated investigator Erik Lönnrot, none was as bizarre as the periodic series of events which came to a conclusion at the desolate mansion of Triste-le-Roy amid the heady aroma of eucalyptus.</q></p><p>I liked the story, its half hour adaptation, and the cover of the copy of <cite>Labyrinths</cite> I checked out at Neilson Library:</p><figure><img height=\"400\" loading=\"lazy\" src=\"https://covers.openlibrary.org/b/olid/OL8000085M-L.jpg\" alt=\"Labyrinths 2007 cover art\"/></figure><p>A slightly different version of the cover was at one point featured on photographer <a href=\"https://www.jasonfulford.com/\">Jason Fulford's website</a>, but can now be found at <a href=\"https://www.isfdb.org/cgi-bin/pl.cgi?340158\">isfdb.org</a> (<a href=\"https://m.media-amazon.com/images/I/417qtPZoP2L.jpg\">jpg</a>). The mirrored pentagon inspired me to put together a little polygon reflection project I had been thinking about for a while.</p><section class=\"projects svg web\" id=\"mirror_polygon_66c\"><h3><span class=\"fl\">SVG Mirror Polygon</span></h3><p><a class=\"naked\" href=\"https://home.6t.lt/66c/mirror_polygon.svg\">link</a></p><p>This interactive polygon placement tool is an SVG image that edits itself. Click to place a polygon, and the next click will place a reflection of the polygon across one of its sides. The most recently placed polygon is selected, unless you shift-click to select another one. Shift-click the background to select none, and press backspace or delete to remove the selected polygon. Use control-C or command-C to copy a data URI containing the current image.</p><iframe loading=\"lazy\" src=\"https://home.6t.lt/66c/mirror_polygon.svg?f=silver&amp;h=12&amp;v=%5B%5B0,0%5D,%5B0,1%5D,%5B0.7401084675258551,1.3065629648763766%5D,%5B1.3065629648763766,0.7401084675258551%5D,%5B1,0%5D%5D\"></iframe><p>The following parameters listed with their default values can be edited using a query string:</p><dl><dt>borderColor</dt><dd>CanvasText</dd><dt>decimalPlaces</dt><dd>12</dd><dt>fillColor</dt><dd>red</dd><dt>heightOfPolygon</dt><dd>10</dd><dt>inlineStyle</dt><dd>color-scheme: light dark; background-color: Canvas</dd><dt>selectedWidth</dt><dd>.5</dd><dt>unselectedWidth</dt><dd>.1</dd><dt>vertices</dt><dd>5</dd></dl><p>Set the values using the first letter of the parameter name. The default values for the polygon border color and the background color are <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/system-color\">system colors</a>. The width variables adjust the size of the polygon's border. The vertices parameter can either be a number 3 or greater, or a 2D array of points defining any polygon. Convex polygons work best, and if you only specify the number of vertices then a regular polygon will be used.</p><p>For example, use these settings for a silver colored pentagon with one right angle: <a href=\"https://home.6t.lt/66c/mirror_polygon.svg?f=silver&amp;h=12&amp;v=%5B%5B0,0%5D,%5B0,1%5D,%5B0.7401084675258551,1.3065629648763766%5D,%5B1.3065629648763766,0.7401084675258551%5D,%5B1,0%5D%5D\">f=silver&amp;h=12&amp;v=[[0,0],[0,1],[0.74,1.31],[1.31,0.74],[1,0]]</a>. I abbreviated the anchor text to include less digits, and some characters should be percent-encoded.<sup>1</sup> This is a octagon that fits well inside a regular pentagon: <a href=\"https://home.6t.lt/66c/mirror_polygon.svg?b=floralwhite&amp;f=%23000&amp;h=14&amp;v=%5B%5B1,0%5D,%5B0.57919,0.57919%5D,%5B0,1%5D,%5B-0.57919,0.57919%5D,%5B-1,0%5D,%5B-0.57919,-0.57919%5D,%5B0,-1%5D,%5B0.57919,-0.57919%5D%5D\">f=%23000&amp;h=14&amp;v=[[1,0],[0.58,0.58],[0,1],[-0.58,0.58],[-1,0],[-0.58,-0.58],[0,-1],[0.58,-0.58]]</a>. The fill color %23000 means #000 or the color black. One more example: <a href=\"https://home.6t.lt/66c/mirror_polygon.svg?i=background-image:url(%22https://www.nasa.gov/wp-content/uploads/static/history/alsj/a17/AS17-134-20387.jpg%22)\">i=background-image:url(\"https://www.nasa.gov ... AS17-134-20387.jpg\")</a>.</p><aside><p>1. Just the square brackets. I've since written a <a href=\"https://home.6t.lt/?s=%23percent_encode_677\">percent-encoding guide</a> as reference for generating URIs in the future.</p></aside></section><h3>Footnotes</h3><p>Over my summer break, which ends in a week, I walked by Buckminster Fuller's gravestone on the Bellwort Path at Mount Auburn Cemetery.</p><p>The book cover image above was accessed through the <a href=\"https://openlibrary.org/dev/docs/api/covers\">Open Library covers API</a>.</p><section class=\"encodings\"><h3>Embedded List</h3><pre>   <!--\n-->            46 45 44 43 42 41 40\n               47                39\n               48                38\n               49                37\n               50                36\n                                 35\n                                 34\n               27 28 29 30 31 32 33\n21 22 23 24 25 26\n20\n19\n18             01 02 03 04\n17 16 15 14 13 12       05\n               11       06\n               10 09 08 07</pre></section>",
      "summary": "Webpage for drawing with mirror reflections.",
      "date_published": "2024-08-27T22:07:34-06:00",
      "date_modified": "2025-07-10T09:28:23-04:00",
      "tags": [
        "encodings",
        "projects",
        "svg",
        "web"
      ]
    }
  ],
  "_atom_elements": {
    "id": "urn:uuid:22620929-5413-4211-BE95-59BD3594FD14",
    "updated": "2025-07-10T11:11:18-04:00",
    "self_link": "https://home.6t.lt/atom.xml"
  }
}
